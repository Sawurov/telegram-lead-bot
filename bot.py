import os
import logging
import gspread
import warnings
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.error import TelegramError
from typing import Dict, Any
from oauth2client.service_account import ServiceAccountCredentials

warnings.filterwarnings("ignore", message="urllib3")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

if not TELEGRAM_BOT_TOKEN or not SPREADSHEET_ID:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class LeadBot:
    def __init__(self):
        self.spreadsheet = self.connect_to_google_sheets()
        self.user_tabs = {
            "saliq_008": "–¢–µ—Ö–Ω–æ–ø–æ—Å",
            "abdukhafizov95": "–°–∞–º–∞—Ä–∫–∞–Ω–¥",
            "aqly_office": "–•–æ—Ä–µ–∑–º",
            "aqly_uz": "–•–æ—Ä–µ–∑–º",
            "aqly_hr": "–•–æ—Ä–µ–∑–º",
            "utkirraimov": "–î–∂–∏–∑–∑–∞–∫",
            "bob_7007": "–î–∂–∏–∑–∑–∞–∫",
            "farhod_developer": "–¢–µ—Ä–º–µ–∑",
            "shoxjaxon055": "–¢–∞—à–∫–µ–Ω—Ç",
            "user3": "–ë—É—Ö–∞—Ä–∞",
            "ravshan_billz": "All"
        }
        self.unconfirmed_leads: Dict[str, Dict[str, Any]] = {}
        self.lead_timers: Dict[str, asyncio.Task] = {}
        self.waiting_confirmation: Dict[int, str] = {}  # chat_id -> username

    @staticmethod
    def connect_to_google_sheets():
        try:
            credentials = {
                "type": os.getenv("TYPE"),
                "project_id": os.getenv("PROJECT_ID"),
                "private_key_id": os.getenv("PRIVATE_KEY_ID"),
                "private_key": os.getenv("PRIVATE_KEY", "").replace("\\n", "\n"),
                "client_email": os.getenv("CLIENT_EMAIL"),
                "client_id": os.getenv("CLIENT_ID"),
                "auth_uri": os.getenv("AUTH_URI"),
                "token_uri": os.getenv("TOKEN_URI"),
                "auth_provider_x509_cert_url": os.getenv("AUTH_PROVIDER_CERT_URL"),
                "client_x509_cert_url": os.getenv("CLIENT_CERT_URL"),
            }
            client = gspread.service_account_from_dict(credentials)
            return client.open_by_key(SPREADSHEET_ID)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
            raise

    def add_lead_to_sheet(self, username: str, message_text: str, user_link: str) -> bool:
        try:
            if username not in self.user_tabs:
                logger.warning(f"–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            worksheet = self.spreadsheet.worksheet(self.user_tabs[username])
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            worksheet.append_row([current_time, message_text, user_link])
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False

    async def send_reminder(self, chat_id: int, username: str, attempt: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            message = (
                f"‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è @{username}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞.\n"
                f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/3"
            )
            await self.application.bot.send_message(chat_id=chat_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    async def handle_confirmation(self, chat_id: int, username: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–∞."""
        if chat_id in self.waiting_confirmation:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            for lead_key in list(self.lead_timers.keys()):
                if lead_key.startswith(f"{chat_id}:"):
                    if self.lead_timers[lead_key]:
                        self.lead_timers[lead_key].cancel()
                    del self.lead_timers[lead_key]

            # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ª–∏–¥–∞—Ö
            for lead_key in list(self.unconfirmed_leads.keys()):
                if lead_key.startswith(f"{chat_id}:"):
                    del self.unconfirmed_leads[lead_key]

            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            del self.waiting_confirmation[chat_id]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            success_message = (
                f"‚úÖ –°–ø–∞—Å–∏–±–æ, @{username}! –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n\n"
                "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ AmoCRM\n"
                "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–¥–∏—é —Å–¥–µ–ª–∫–∏\n"
                "3Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ —ç—Ç–∞–ø–∞–º –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂\n\n"
                "üí™ –£–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º!"
            )
            await self.application.bot.send_message(chat_id=chat_id, text=success_message)
            return True
        return False

    async def start_lead_timer(self, chat_id: int, message_id: int, username: str):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏–¥–∞."""
        lead_key = f"{chat_id}:{message_id}"
        
        # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        await asyncio.sleep(120)
        if lead_key in self.unconfirmed_leads:
            await self.send_reminder(chat_id, username, 1)
            
            # –í—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
            await asyncio.sleep(180)
            if lead_key in self.unconfirmed_leads:
                await self.send_reminder(chat_id, username, 2)
                
                # –¢—Ä–µ—Ç—å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
                await asyncio.sleep(180)
                if lead_key in self.unconfirmed_leads:
                    await self.send_reminder(chat_id, username, 3)
                    
                    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    await asyncio.sleep(180)
                    if lead_key in self.unconfirmed_leads:
                        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–¥–µ
                        del self.unconfirmed_leads[lead_key]
                        if chat_id in self.waiting_confirmation:
                            del self.waiting_confirmation[chat_id]
                        await self.application.bot.send_message(
                            chat_id=chat_id,
                            text=f"‚ùå –õ–∏–¥ –¥–ª—è @{username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."
                        )

    async def handle_message(self, update: Update, context):
        try:
            message = update.message
            chat_id = message.chat_id
            message_id = message.message_id
            message_text = message.text.lower() if message.text else ""
            sender_username = message.from_user.username

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–∞
            if message_text in ["–ø—Ä–∏–Ω—è–ª", "–æ–∫", "—Å–ø–∞—Å–∏–±–æ", "–æ–∫, —Å–ø–∞—Å–∏–±–æ", "–æ–∫–µ", "oke"]:
                if chat_id in self.waiting_confirmation:
                    username = self.waiting_confirmation[chat_id]
                    await self.handle_confirmation(chat_id, username)
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ @username –∏ —Å—Å—ã–ª–∫–∏ AmoCRM
            if "@" in message_text:
                username = message_text.split("@")[1].split()[0].strip()
                amo_link = next((word for word in message_text.split() 
                               if "amocrm.ru/leads/detail/" in word 
                               or "billz.amocrm.ru" in word), None)
                
                if amo_link and username:
                    if self.add_lead_to_sheet(username, message_text, amo_link):
                        sent_message = await message.reply_text(
                            f"üì® –õ–∏–¥ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è @{username}!\n\n"
                            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞."
                        )
                        
                        lead_key = f"{chat_id}:{sent_message.message_id}"
                        self.unconfirmed_leads[lead_key] = {
                            "assigned_to": username,
                            "amo_link": amo_link
                        }
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        self.waiting_confirmation[chat_id] = username
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        self.lead_timers[lead_key] = asyncio.create_task(
                            self.start_lead_timer(chat_id, sent_message.message_id, username)
                        )
                    else:
                        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def start_command(self, update: Update, context):
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–¥–µ–ª–∫—É."
        )

    def run(self):
        self.application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(MessageHandler(filters.TEXT, self.handle_message))
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = LeadBot()
    bot.run()
