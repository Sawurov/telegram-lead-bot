import os
import logging
import gspread
import warnings
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.error import TelegramError
from typing import Dict, Any
from oauth2client.service_account import ServiceAccountCredentials

warnings.filterwarnings("ignore", message="urllib3")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

if not TELEGRAM_BOT_TOKEN or not SPREADSHEET_ID:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN –∏–ª–∏ SPREADSHEET_ID")

class LeadBot:
    def __init__(self):
        self.spreadsheet = self.connect_to_google_sheets()
        self.user_tabs = {
            "SALIQ_008": "–¢–µ—Ö–Ω–æ–ø–æ—Å",
            "Abdukhafizov95": "–°–∞–º–∞—Ä–∫–∞–Ω–¥",
            "aqly_office": "–•–æ—Ä–µ–∑–º",
            "aqly_uz": "–•–æ—Ä–µ–∑–º",
            "Aqly_hr": "–•–æ—Ä–µ–∑–º",
            "utkirraimov": "–î–∂–∏–∑–∑–∞–∫",
            "bob_7007": "–î–∂–∏–∑–∑–∞–∫",
            "user1": "–¢–µ—Ä–º–µ–∑",
            "user2": "–¢–∞—à–∫–µ–Ω—Ç",
            "user3":"–ë—É—Ö–∞—Ä–∞"
        }
        self.unconfirmed_leads: Dict[int, Dict[str, Any]] = {}

    @staticmethod
    def connect_to_google_sheets():
        try:
            credentials = {
                "type": os.getenv("TYPE"),
                "project_id": os.getenv("PROJECT_ID"),
                "private_key_id": os.getenv("PRIVATE_KEY_ID"),
                "private_key": os.getenv("PRIVATE_KEY", "").replace("\\n", "\n"),
                "client_email": os.getenv("CLIENT_EMAIL"),
                "client_id": os.getenv("CLIENT_ID"),
                "auth_uri": os.getenv("AUTH_URI"),
                "token_uri": os.getenv("TOKEN_URI"),
                "auth_provider_x509_cert_url": os.getenv("AUTH_PROVIDER_CERT_URL"),
                "client_x509_cert_url": os.getenv("CLIENT_CERT_URL"),
            }
            client = gspread.service_account_from_dict(credentials)
            return client.open_by_key(SPREADSHEET_ID)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
            raise

    def add_lead_to_sheet(self, username: str, message_text: str, user_link: str) -> bool:
        try:
            if username not in self.user_tabs:
                logger.warning(f"–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            worksheet = self.spreadsheet.worksheet(self.user_tabs[username])
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            worksheet.append_row([current_time, message_text, user_link])
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False

    async def handle_message(self, update: Update, context):
        try:
            message_text = update.message.text
            sender = update.message.from_user.username
            chat_id = update.message.chat_id

            if message_text.lower() in ["–ø—Ä–∏–Ω—è–ª", "–æ–∫, —Å–ø–∞—Å–∏–±–æ", "–æ–∫", "—Å–ø–∞—Å–∏–±–æ"]:
                for msg_id, lead_info in list(self.unconfirmed_leads.items()):
                    if lead_info["assigned_to"] == sender:
                        del self.unconfirmed_leads[msg_id]
                        await update.message.reply_text(
                            f"‚úÖ @{sender}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!"
                        )
                        return

            if "@" in message_text and "amocrm.ru/leads/detail/" in message_text:
                username = message_text.split("@")[1].split()[0]
                amo_link = next((word for word in message_text.split() if "amocrm.ru/leads/detail/" in word), "")
                if self.add_lead_to_sheet(username, message_text, amo_link):
                    sent_message = await update.message.reply_text(
                        f"üì® –õ–∏–¥ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è @{username}!\n\n"
                        "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞."
                    )
                    self.unconfirmed_leads[sent_message.message_id] = {
                        "assigned_to": username,
                        "amo_link": amo_link
                    }
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    async def start_command(self, update: Update, context):
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–¥–µ–ª–∫—É."
        )

    def run(self):
        application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(MessageHandler(filters.TEXT, self.handle_message))
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == "__main__":
    bot = LeadBot()
    bot.run()
