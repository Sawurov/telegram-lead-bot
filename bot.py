import os
import logging
import gspread
import warnings
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup


warnings.filterwarnings('ignore', message='urllib3')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≤–∫–ª–∞–¥–æ–∫
USER_TABS = {
    "Islomalinuraliev": "–¢–∞–±1",
    "user2": "–¢–∞–±2",
    "user3": "–¢–∞–±3"
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç–∞–±—ã
}

spreadsheet = None

def connect_to_google_sheets():
    try:
        credentials = {
            "type": os.getenv("TYPE"),
            "project_id": os.getenv("PROJECT_ID"),
            "private_key_id": os.getenv("PRIVATE_KEY_ID"),
            "private_key": os.getenv("PRIVATE_KEY", "").replace("\\n", "\n"),
            "client_email": os.getenv("CLIENT_EMAIL"),
            "client_id": os.getenv("CLIENT_ID"),
            "auth_uri": os.getenv("AUTH_URI"),
            "token_uri": os.getenv("TOKEN_URI"),
            "auth_provider_x509_cert_url": os.getenv("AUTH_PROVIDER_CERT_URL"),
            "client_x509_cert_url": os.getenv("CLIENT_CERT_URL"),
        }

        if not all(credentials.values()):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Google Sheets –≤ .env —Ñ–∞–π–ª–µ")

        client = gspread.service_account_from_dict(credentials)
        return client.open_by_key("1HfqKVaqUrCkOnvawQ9SkucjIlYujtLtZqcXfgE03lss")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
        raise

def add_lead_to_sheet(username, message_text, user_link):
    try:
        global spreadsheet
        if username not in USER_TABS:
            raise ValueError(f"–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏ —Ç–∞–±–∞
        worksheet = spreadsheet.worksheet(USER_TABS[username])
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        worksheet.append_row([
            current_time,    # –î–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏
            message_text,    # –°–æ–æ–±—â–µ–Ω–∏–µ
            user_link        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏–¥
        ])
        
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        return False

unconfirmed_leads = {}

async def remind_confirmation(context, chat_id, message_id, username, amo_link):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            if message_id not in unconfirmed_leads:
                break
            
            await context.bot.send_message(
                chat_id,
                f"@{username}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞!\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—å—Ç–µ '–ø—Ä–∏–Ω—è–ª' –∏–ª–∏ '–æ–∫, —Å–ø–∞—Å–∏–±–æ'"
            )
            await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            break

async def check_confirmation_timeout(context, chat_id, message_id, username, amo_link):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    await asyncio.sleep(180)  # –ñ–¥–µ–º 3 –º–∏–Ω—É—Ç—ã
    if message_id in unconfirmed_leads:
        await context.bot.send_message(
            chat_id,
            f"‚ö†Ô∏è @{username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç!\n"
            "–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        asyncio.create_task(remind_confirmation(context, chat_id, message_id, username, amo_link))

async def handle_message(update, context):
    try:
        message_text = update.message.text
        sender = update.message.from_user.username
        chat_id = update.message.chat_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        if message_text.lower() in ['–ø—Ä–∏–Ω—è–ª', '–æ–∫, —Å–ø–∞—Å–∏–±–æ', '–æ–∫', '—Å–ø–∞—Å–∏–±–æ']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ª–∏–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for msg_id, lead_info in list(unconfirmed_leads.items()):
                if lead_info['assigned_to'] == sender:
                    del unconfirmed_leads[msg_id]
                    await update.message.reply_text(
                        f"‚úÖ @{sender}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!\n\n"
                        f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç:\n"
                        f"1. –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ AmoCRM\n"
                        f"2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–¥–∞—á–∏ –≤ AmoCRM\n"
                        f"3. –î–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —á–∞—Ç\n\n"
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏–¥: {lead_info['amo_link']}"
                    )
                    return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ @ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ AmoCRM
        if "@" in message_text and "amocrm.ru/leads/detail/" in message_text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = message_text.split("@")[1].split()[0]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ AmoCRM
            amo_link = ""
            for word in message_text.split():
                if "amocrm.ru/leads/detail/" in word:
                    amo_link = word
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            if add_lead_to_sheet(username, message_text, amo_link):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –ª–∏–¥–∞
                sent_message = await update.message.reply_text(
                    f"üì® –õ–∏–¥ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è @{username}!\n\n"
                    f"‚ùóÔ∏è @{username}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç, –æ—Ç–≤–µ—Ç–∏–≤:\n"
                    f"'–ø—Ä–∏–Ω—è–ª' –∏–ª–∏ '–æ–∫, —Å–ø–∞—Å–∏–±–æ'\n\n"
                    f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏–¥: {amo_link}"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º –ª–∏–¥–µ
                unconfirmed_leads[sent_message.message_id] = {
                    'assigned_to': username,
                    'amo_link': amo_link,
                    'timestamp': datetime.now()
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–π–º–∞—É—Ç–∞
                asyncio.create_task(check_confirmation_timeout(
                    context, 
                    chat_id, 
                    sent_message.message_id, 
                    username, 
                    amo_link
                ))
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
                )
        else:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç @ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ AmoCRM
            if not (message_text.lower() in ['–ø—Ä–∏–Ω—è–ª', '–æ–∫, —Å–ø–∞—Å–∏–±–æ', '–æ–∫', '—Å–ø–∞—Å–∏–±–æ']):
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "- –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username)\n"
                    "- –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É –≤ AmoCRM"
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def start_command(update, context):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username).\n"
        "–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É —Ç–∞–±–ª–∏—Ü—ã."
    )

def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
        global spreadsheet
        spreadsheet = connect_to_google_sheets()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(MessageHandler(filters.TEXT, handle_message))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()