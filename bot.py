import os
import sys
import json
import logging
import gspread
import gspread.exceptions
import re
import time
import requests
import asyncio
import glob
import signal
from datetime import datetime
from collections import defaultdict
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.error import TelegramError, NetworkError, TimedOut, Conflict
from flask import Flask
from threading import Thread, Timer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–ø—É—Å–∫–∞
INSTANCE_RUNNING = False
SHUTDOWN_EVENT = asyncio.Event()

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self):
        self.TELEGRAM_BOT_TOKEN = self._get_env("TELEGRAM_BOT_TOKEN")
        self.SPREADSHEET_ID = self._get_env("SPREADSHEET_ID")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        google_creds_json = self._get_env("GOOGLE_CREDENTIALS")
        self.GOOGLE_CREDS = json.loads(google_creds_json)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        self.GOOGLE_CREDS["private_key"] = self.GOOGLE_CREDS["private_key"].replace("\\n", "\n")

        self.PORT = int(os.getenv("PORT", 8080))
        self.RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "")  # URL –≤–∞—à–µ–≥–æ Render –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        self._validate_google_creds()

    def _get_env(self, key: str, default: str = None) -> str:
        value = os.getenv(key, default)
        if value is None:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {key}")
        return value

    def _validate_google_creds(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google"""
        required_keys = [
            "type", "project_id", "private_key_id",
            "private_key", "client_email", "client_id"
        ]
        for key in required_keys:
            if not self.GOOGLE_CREDS.get(key):
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á –≤ Google Credentials: {key}")

        if "-----BEGIN PRIVATE KEY-----" not in self.GOOGLE_CREDS["private_key"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞")

class KeepAliveService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Render –∏–Ω—Å—Ç–∞–Ω—Å–∞"""
    def __init__(self, url: str, interval: int = 840):  # 14 –º–∏–Ω—É—Ç
        self.url = url
        self.interval = interval
        self.timer = None
        self.running = False

    def ping_self(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ–±–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            if self.url:
                response = requests.get(self.url, timeout=10)
                logger.info(f"Keep-alive ping: {response.status_code}")
            else:
                logger.info("Keep-alive ping: URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.warning(f"Keep-alive ping failed: {e}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π ping
        if self.running:
            self.timer = Timer(self.interval, self.ping_self)
            self.timer.start()

    def start(self):
        """–ó–∞–ø—É—Å–∫ keep-alive —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.running:
            self.running = True
            logger.info(f"–ó–∞–ø—É—Å–∫ keep-alive —Å–µ—Ä–≤–∏—Å–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval}s)")
            self.ping_self()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ keep-alive —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        if self.timer:
            self.timer.cancel()
        logger.info("Keep-alive —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

class GoogleSheetsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    def __init__(self, config: Config):
        self.config = config
        self._client = None
        self._spreadsheet = None
        
    @property
    def client(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –∫–ª–∏–µ–Ω—Ç–∞"""
        if self._client is None:
            try:
                logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google Sheets...")
                self._client = gspread.service_account_from_dict(self.config.GOOGLE_CREDS)
                logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google Sheets —É—Å–ø–µ—à–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets: {str(e)}")
                raise
        return self._client
    
    @property
    def spreadsheet(self):
        """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Google –¢–∞–±–ª–∏—Ü—ã"""
        if self._spreadsheet is None:
            try:
                self._spreadsheet = self.client.open_by_key(self.config.SPREADSHEET_ID)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–µ: {e}")
                raise
        return self._spreadsheet

    def append_lead(self, worksheet_name: str, data: list) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±
            try:
                worksheet = self.spreadsheet.worksheet(worksheet_name)
            except gspread.exceptions.WorksheetNotFound:
                logger.warning(f"–¢–∞–± '{worksheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é...")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–±
                worksheet = self.spreadsheet.add_worksheet(
                    title=worksheet_name, 
                    rows=1000, 
                    cols=10
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                worksheet.append_row([
                    "–î–∞—Ç–∞", "–°–æ–æ–±—â–µ–Ω–∏–µ", "–°—Å—ã–ª–∫–∞ AmoCRM", 
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
                ])
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∞–±: {worksheet_name}")
            
            worksheet.append_row(data)
            logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {worksheet_name}: {data}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False

    def count_leads_for_date(self, worksheet_name: str, date: str) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –ª–∏–¥–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
        try:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–æ–≤
            try:
                worksheet = self.spreadsheet.worksheet(worksheet_name)
            except gspread.exceptions.WorksheetNotFound:
                logger.warning(f"–¢–∞–± '{worksheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Google Sheets")
                return 0
                
            all_values = worksheet.get_all_values()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            if len(all_values) > 1:
                data_rows = all_values[1:]
            else:
                data_rows = all_values
            
            count = 0
            for row in data_rows:
                if row and len(row) > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É
                    record_date = str(row[0]).split(' ')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                    if record_date == date:
                        count += 1
                        
            return count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∏–¥–æ–≤ –¥–ª—è {worksheet_name}: {e}")
            return 0

class LeadStatsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–¥–æ–≤"""
    def __init__(self, sheets_manager: GoogleSheetsManager, user_tabs: dict):
        self.sheets = sheets_manager
        self.user_tabs = user_tabs
        self.daily_stats = defaultdict(lambda: defaultdict(int))
        
    async def get_daily_stats_command(self, update: Update, context):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å"""
        args = context.args
        if args and len(args) > 0:
            try:
                target_date = args[0]
                datetime.strptime(target_date, "%Y-%m-%d")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /stats YYYY-MM-DD")
                return
        else:
            target_date = datetime.now().strftime("%Y-%m-%d")
        
        try:
            stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –∑–∞ {target_date}:</b>\n\n"
            
            total_leads = 0
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ—Ä–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–±—ã –∏–∑ user_tabs
            unique_tabs = set(self.user_tabs.values())
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–∞–º
            tabs_stats = {}
            for tab_name in unique_tabs:
                count = self.sheets.count_leads_for_date(tab_name, target_date)
                if count > 0:
                    tabs_stats[tab_name] = count
                    total_leads += count
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏ –≤—ã–≤–æ–¥–∏–º
            for tab_name in sorted(tabs_stats.keys()):
                stats_text += f"‚Ä¢ {tab_name}: {tabs_stats[tab_name]} –ª–∏–¥–æ–≤\n"
            
            if total_leads == 0:
                stats_text += "–ù–µ—Ç –ª–∏–¥–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É\n"
            
            stats_text += f"\nüéØ <b>–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_leads} –ª–∏–¥–æ–≤</b>"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–∞–±–∞–º
            missing_tabs = []
            for tab_name in unique_tabs:
                if tab_name not in tabs_stats:
                    missing_tabs.append(tab_name)
            
            if missing_tabs:
                stats_text += f"\n‚ö†Ô∏è <b>–¢–∞–±—ã –±–µ–∑ –ª–∏–¥–æ–≤:</b> {', '.join(missing_tabs)}"
                stats_text += f"\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ /debug {target_date} –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
            backup_count = self._count_backup_leads()
            if backup_count > 0:
                stats_text += f"\nüîÑ <b>–ù–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {backup_count} –ª–∏–¥–æ–≤</b>"
                stats_text += "\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ /restore –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            
            await self._safe_send_message(update, stats_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    def _count_backup_leads(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –ª–∏–¥–æ–≤ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
        total_count = 0
        backup_files = glob.glob("failed_leads_*.json")
        
        for backup_file in backup_files:
            try:
                with open(backup_file, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                    total_count += len(backup_data)
            except Exception:
                continue
                
        return total_count

class LeadBot:
    def __init__(self, config: Config, sheets_manager: GoogleSheetsManager):
        self.config = config
        self.sheets = sheets_manager
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ç–æ—á–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
        self.user_tabs = {
            "texnopos_company": "–¢–µ—Ö–Ω–æ–ø–æ—Å",
            "abdukhafizov95": "–°–∞–º–∞—Ä–∫–∞–Ω–¥",      # –ò–°–ü–†–ê–í–õ–ï–ù –†–ï–ì–ò–°–¢–†
            "aqly_office": "–•–æ—Ä–µ–∑–º",
            "aqly_uz": "–•–æ—Ä–µ–∑–º",
            "aqly_hr": "–•–æ—Ä–µ–∑–º",               # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            "billz_namangan": "–ù–∞–º–∞–Ω–≥–∞–Ω",       # –ò–°–ü–†–ê–í–õ–ï–ù –†–ï–ì–ò–°–¢–†
            "uzstylegroup": "–ù–∞–º–∞–Ω–≥–∞–Ω",
            "utkirraimov": "–î–∂–∏–∑–∑–∞–∫",
            "bob_7007": "–î–∂–∏–∑–∑–∞–∫",
            "farhod_developer": "–¢–µ—Ä–º–µ–∑",       # –ò–°–ü–†–ê–í–õ–ï–ù –†–ï–ì–ò–°–¢–†
            "burhan_ergashov": "–¢–∞—à–∫–µ–Ω—Ç",
            "mfarrux": "–ë—É—Ö–∞—Ä–∞",
            "nasimjon_2014": "–ë—É—Ö–∞—Ä–∞",
            "billzfergana": "–§–µ—Ä–≥–∞–Ω–∞",
            "okmurtazaev": "–§–µ—Ä–≥–∞–Ω–∞",
            "bobur_abdukahharov": "–û—à",
            "sysadmin7777": "–ö—Ö–æ–¥–∂–∞–Ω–¥",
            "sibrohimovg": "All",              # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            "makhmud23": "All",                # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            "ravshan_billz": "All"
        }
        self.application = None
        self.keep_alive = KeepAliveService(config.RENDER_URL)
        self.stats_manager = LeadStatsManager(sheets_manager, self.user_tabs)

    def _extract_message_text(self, message):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: caption > text > forwarded content
        if message.caption:
            logger.debug("–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ caption")
            return message.caption
        elif message.text:
            logger.debug("–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ text")
            return message.text
        elif hasattr(message, 'forward_from') and message.forward_from:
            logger.debug("–ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ forwarded —Å–æ–æ–±—â–µ–Ω–∏—è")
            return message.text or message.caption
        return None

    def _get_message_type(self, message):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if message.photo:
            return "photo"
        elif message.document:
            return "document"
        elif message.video:
            return "video"
        elif message.audio:
            return "audio"
        elif message.voice:
            return "voice"
        elif message.sticker:
            return "sticker"
        elif message.text:
            return "text"
        elif message.caption:
            return "caption"
        else:
            return "unknown"

    def _extract_all_leads_info(self, text):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –í–°–ï–• –ª–∏–¥–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Å—ã–ª–∫—É AmoCRM
        link_pattern = r'(https?://[^\s]*amocrm[^\s]*)'
        link_match = re.search(link_pattern, text, re.IGNORECASE)
        
        if not link_match:
            logger.debug("–°—Å—ã–ª–∫–∞ AmoCRM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return []
        
        amo_link = link_match.group(1)
        
        # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –í–°–ï —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        username_pattern = r'@(\w+)'
        username_matches = re.findall(username_pattern, text, re.IGNORECASE)
        
        if not username_matches:
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        leads = []
        for username in username_matches:
            username_lower = username.lower()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–∏—Ö —Ç–∞–±–∞—Ö
            if username_lower in self.user_tabs:
                leads.append((username_lower, amo_link))
                logger.debug(f"–ù–∞–π–¥–µ–Ω –ª–∏–¥: {username_lower} -> {amo_link}")
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –≤ 'All'")
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–± "All"
                leads.append((username_lower, amo_link))
        
        return leads

    async def _add_lead_with_retry(self, worksheet_name, data, max_retries=3):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                success = self.sheets.append_lead(worksheet_name, data)
                if success:
                    return True
                else:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {worksheet_name}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏–¥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
        
        return False

    async def _save_to_backup(self, worksheet_name, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä"""
        try:
            backup_file = f"failed_leads_{datetime.now().strftime('%Y%m%d')}.json"
            
            backup_entry = {
                "timestamp": datetime.now().isoformat(),
                "worksheet": worksheet_name,
                "data": data
            }
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            try:
                with open(backup_file, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                backup_data = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            backup_data.append(backup_entry)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
                
            logger.info(f"–õ–∏–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª: {backup_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤: {e}")

    async def handle_message(self, update: Update, context):
        """–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            message = update.message
            
            if not message:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if message.from_user and message.from_user.username == "billzsalesnotificationsbot":
                logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @billzsalesnotificationsbot")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            message_text = self._extract_message_text(message)
            
            if not message_text:
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                msg_info = {
                    "message_id": message.message_id,
                    "from_user": message.from_user.username if message.from_user else "Unknown",
                    "chat_id": message.chat_id,
                    "message_type": self._get_message_type(message),
                    "has_text": bool(message.text),
                    "has_caption": bool(message.caption),
                    "has_entities": bool(message.entities),
                    "has_caption_entities": bool(message.caption_entities)
                }
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {msg_info}")
                return

            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username if message.from_user else 'Unknown'}: {message_text[:100]}...")

            # –ù–û–í–´–ô –ü–û–î–•–û–î: –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –ª–∏–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            leads_info = self._extract_all_leads_info(message_text)
            
            if not leads_info:
                logger.info("–õ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                logger.debug(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                return

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(leads_info)} –ª–∏–¥–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {[f'@{u}' for u, _ in leads_info]}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ª–∏–¥
            processed_count = 0
            for username, amo_link in leads_info:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–± –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    worksheet_name = self.user_tabs.get(username, "All")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                    lead_data = [
                        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        message_text,
                        amo_link,
                        username,
                        message.from_user.username if message.from_user else "Unknown"
                    ]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    success = await self._add_lead_with_retry(worksheet_name, lead_data)
                    
                    if success:
                        logger.info(f"‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è @{username} –≤ —Ç–∞–± '{worksheet_name}'")
                        processed_count += 1
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–¥ –¥–ª—è @{username} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        await self._save_to_backup(worksheet_name, lead_data)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞ –¥–ª—è @{username}: {e}")

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏–¥–æ–≤: {processed_count}/{len(leads_info)}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

    async def _safe_send_message(self, update: Update, text: str, parse_mode: str = 'HTML'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º parse_mode
            await update.message.reply_text(text, parse_mode=parse_mode)
        except Exception as e:
            if "can't parse entities" in str(e).lower():
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ç–∫–∏: {e}")
                try:
                    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                    clean_text = self._strip_markup(text)
                    await update.message.reply_text(clean_text)
                except Exception as e2:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def _strip_markup(self, text: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç HTML –∏ Markdown —Ä–∞–∑–º–µ—Ç–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', text)
        # –£–¥–∞–ª—è–µ–º Markdown —Ä–∞–∑–º–µ—Ç–∫—É
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # **bold**
        text = re.sub(r'\*(.*?)\*', r'\1', text)      # *italic*
        text = re.sub(r'__(.*?)__', r'\1', text)      # __underline__
        text = re.sub(r'_(.*?)_', r'\1', text)        # _italic_
        return text
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        args = context.args
        if args and len(args) > 0:
            target_date = args[0]
        else:
            target_date = datetime.now().strftime("%Y-%m-%d")
        
        debug_text = f"üîç **–û–¢–õ–ê–î–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –∑–∞ {target_date}:**\n\n"
        
        total_leads = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–ê–ñ–î–´–ô —Ç–∞–± –æ—Ç–¥–µ–ª—å–Ω–æ
        for user, tab_name in self.user_tabs.items():
            try:
                count = self.sheets.count_leads_for_date(tab_name, target_date)
                debug_text += f"‚Ä¢ @{user} ‚Üí {tab_name}: {count} –ª–∏–¥–æ–≤\n"
                total_leads += count
            except Exception as e:
                debug_text += f"‚Ä¢ @{user} ‚Üí {tab_name}: –û–®–ò–ë–ö–ê - {str(e)}\n"
        
        debug_text += f"\nüéØ **–ò—Ç–æ–≥–æ: {total_leads} –ª–∏–¥–æ–≤**\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–æ–≤
        debug_text += "üìã **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–æ–≤ –≤ Google Sheets:**\n"
        try:
            all_worksheets = self.sheets.spreadsheet.worksheets()
            existing_tabs = [ws.title for ws in all_worksheets]
            debug_text += f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±—ã: {', '.join(existing_tabs)}\n\n"
            
            unique_tabs = set(self.user_tabs.values())
            for tab in unique_tabs:
                if tab in existing_tabs:
                    debug_text += f"‚úÖ {tab}\n"
                else:
                    debug_text += f"‚ùå {tab} - –ù–ï –ù–ê–ô–î–ï–ù!\n"
                    
        except Exception as e:
            debug_text += f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–æ–≤: {e}\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(debug_text) > 4000:
            parts = [debug_text[i:i+4000] for i in range(0, len(debug_text), 4000)]
            for i, part in enumerate(parts):
                await update.message.reply_text(f"**–ß–∞—Å—Ç—å {i+1}:**\n{part}", parse_mode='Markdown')
        else:
            await update.message.reply_text(debug_text, parse_mode='Markdown')

    async def create_missing_tabs_command(self, update: Update, context):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–æ–≤ –≤ Google Sheets"""
        try:
            await update.message.reply_text("üîß –ü—Ä–æ–≤–µ—Ä—è—é –∏ —Å–æ–∑–¥–∞—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–æ–≤
            all_worksheets = self.sheets.spreadsheet.worksheets()
            existing_tabs = [ws.title for ws in all_worksheets]
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–±—ã –∏–∑ –Ω–∞—à–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
            required_tabs = set(self.user_tabs.values())
            
            created_count = 0
            for tab_name in required_tabs:
                if tab_name not in existing_tabs:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–±
                        worksheet = self.sheets.spreadsheet.add_worksheet(
                            title=tab_name, 
                            rows=1000, 
                            cols=10
                        )
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        worksheet.append_row([
                            "–î–∞—Ç–∞", "–°–æ–æ–±—â–µ–Ω–∏–µ", "–°—Å—ã–ª–∫–∞ AmoCRM", 
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
                        ])
                        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–∞–±: {tab_name}")
                        created_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–∞ {tab_name}: {e}")
            
            if created_count > 0:
                await update.message.reply_text(
                    f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö —Ç–∞–±–æ–≤!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /stats –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                )
            else:
                await update.message.reply_text("‚ÑπÔ∏è –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–æ–≤")

    async def restore_failed_leads(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        backup_files = glob.glob("failed_leads_*.json")
        
        total_restored = 0
        total_failed = 0
        
        for backup_file in backup_files:
            try:
                with open(backup_file, 'r', encoding='utf-8') as f:
                    failed_leads = json.load(f)
                
                restored_count = 0
                for lead in failed_leads:
                    success = await self._add_lead_with_retry(
                        lead["worksheet"], 
                        lead["data"], 
                        max_retries=1
                    )
                    if success:
                        restored_count += 1
                        total_restored += 1
                    else:
                        total_failed += 1
                
                if restored_count > 0:
                    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count}/{len(failed_leads)} –ª–∏–¥–æ–≤ –∏–∑ {backup_file}")
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    os.rename(backup_file, f"processed_{backup_file}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ {backup_file}: {e}")
        
        return total_restored, total_failed

    async def restore_failed_leads_command(self, update: Update, context)::
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤"""
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤...")
        
        try:
            restored, failed = await self.restore_failed_leads()
            
            if restored > 0:
                await update.message.reply_text(
                    f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                    f"üìà –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored} –ª–∏–¥–æ–≤\n"
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed} –ª–∏–¥–æ–≤"
                )
            else:
                await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –ª–∏–¥–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–¥–æ–≤")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("stats", self.stats_manager.get_daily_stats_command))
        self.application.add_handler(CommandHandler("debug", self.debug_stats_command))
        self.application.add_handler(CommandHandler("create_tabs", self.create_missing_tabs_command))
        self.application.add_handler(CommandHandler("restore", self.restore_failed_leads_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("users", self.show_users_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)

    async def show_users_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç–∞–±–æ–≤"""
        users_text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç–∞–±–æ–≤:</b>\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∞–±–∞–º
        tabs_users = defaultdict(list)
        for user, tab in self.user_tabs.items():
            tabs_users[tab].append(f"@{user}")
        
        for tab_name in sorted(tabs_users.keys()):
            users_list = ", ".join(sorted(tabs_users[tab_name]))
            users_text += f"<b>{tab_name}:</b>\n{users_list}\n\n"
        
        await self._safe_send_message(update, users_text)

    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        help_text = """üëã <b>–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /stats [–¥–∞—Ç–∞] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /stats 2025-07-28)
‚Ä¢ /debug [–¥–∞—Ç–∞] - –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ /create_tabs - –°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±—ã
‚Ä¢ /restore - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
‚Ä¢ /users - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–∞–±—ã
‚Ä¢ /help - –ü–æ–º–æ—â—å

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username) –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–¥–µ–ª–∫—É AmoCRM.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å—é
‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–¥–ø–∏—Å—å—é
‚Ä¢ <b>–ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</b>

<b>–ü—Ä–∏–º–µ—Ä:</b> 
<code>https://billz.amocrm.ru/leads/123 @user1 @user2</code>"""
        
        await self._safe_send_message(update, help_text)

    async def help_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """üîß <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –ª–∏–¥–æ–≤</b>

<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:</b>
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏–¥—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ù–ï–°–ö–û–õ–¨–ö–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏  
‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ Google Sheets –ø–æ —Ç–∞–±–∞–º
‚úÖ –í–µ–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±—ã

<b>–§–æ—Ä–º–∞—Ç –ª–∏–¥–∞:</b>
<code>@username ... https://subdomain.amocrm.ru/...</code>
<code>https://subdomain.amocrm.ru/... @user1 @user2</code>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /stats 2025-07-28 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
‚Ä¢ /debug 2025-07-28 - –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ /create_tabs - –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±—ã –≤ Sheets
‚Ä¢ /restore - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–∞–±–æ–≤

<b>–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_tabs –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç amocrm.ru
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restore –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        await self._safe_send_message(update, help_text)

    async def graceful_shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        global INSTANCE_RUNNING
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        
        INSTANCE_RUNNING = False
        SHUTDOWN_EVENT.set()
        
        if self.application:
            try:
                await self.application.stop()
                await self.application.shutdown()
                logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
        
        self.keep_alive.stop()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        global INSTANCE_RUNNING
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
        if INSTANCE_RUNNING:
            logger.error("‚ùå –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        INSTANCE_RUNNING = True
        
        # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render
        app = Flask(__name__)
        
        @app.route('/')
        def keep_alive_endpoint():
            return f"Bot is running! Time: {datetime.now().isoformat()}"
        
        @app.route('/health')
        def health_check():
            return {"status": "healthy", "timestamp": datetime.now().isoformat()}
        
        @app.route('/shutdown', methods=['POST'])
        def shutdown_endpoint():
            """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
            logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ /shutdown")
            SHUTDOWN_EVENT.set()
            return {"status": "shutdown initiated"}
        
        def run_flask():
            app.run(host='0.0.0.0', port=self.config.PORT)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread(target=run_flask, daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive —Å–µ—Ä–≤–∏—Å
        self.keep_alive.start()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            asyncio.create_task(self.graceful_shutdown())
        
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –£–õ–£–ß–®–ï–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        retry_count = 0
        max_retries = 3
        
        while retry_count < max_retries and not SHUTDOWN_EVENT.is_set():
            try:
                logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{retry_count + 1}")
                
                self.application = ApplicationBuilder().token(self.config.TELEGRAM_BOT_TOKEN).build()
                self.setup_handlers()
                
                logger.info("=== –ë–û–¢ –ó–ê–ü–£–©–ï–ù –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò –ü–ê–†–°–ò–ù–ì–ê ===")
                logger.info("‚úÖ HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ Markdown")
                logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
                logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–æ–≤")
                logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /debug")
                logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–æ–≤")
                
                retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
                
                # –ó–∞–ø—É—Å–∫ polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                self.application.run_polling(
                    poll_interval=2.0,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    timeout=30,
                    read_timeout=20,
                    write_timeout=20,
                    connect_timeout=20,
                    pool_timeout=20,
                    close_loop=False  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop
                )
                
            except Conflict as e:
                retry_count += 1
                wait_time = 15 + (retry_count * 5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
                logger.error(f"üö´ –ö–û–ù–§–õ–ò–ö–¢ –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
                logger.info(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
                if self.application:
                    try:
                        asyncio.run(self.application.stop())
                        asyncio.run(self.application.shutdown())
                    except Exception:
                        pass
                
                time.sleep(wait_time)
                
            except (NetworkError, TimedOut) as e:
                retry_count += 1
                wait_time = min(2 ** retry_count, 60)
                logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
                logger.info(f"üí§ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                time.sleep(wait_time)
                
            except Exception as e:
                retry_count += 1
                wait_time = min(2 ** retry_count, 60)
                logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
                if retry_count < max_retries:
                    logger.info(f"üí§ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                else:
                    logger.critical("üíÄ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                    break
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        asyncio.run(self.graceful_shutdown())
        INSTANCE_RUNNING = False

    async def error_handler(self, update: Update, context):
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        error = context.error
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
        if isinstance(error, Conflict):
            logger.warning(f"üö´ –ö–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {error}")
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        if isinstance(error, (NetworkError, TimedOut)):
            logger.warning(f"üåê –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {error}")
            return
            
        logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {error}", exc_info=error)

if __name__ == "__main__":
    try:
        config = Config()
        sheets_manager = GoogleSheetsManager(config)
        bot = LeadBot(config, sheets_manager)
        
        logger.info("=== –ó–ê–ü–£–°–ö –ë–û–¢–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú –ü–ê–†–°–ò–ù–ì–ê ===")
        logger.info(f"üåê Render URL: {config.RENDER_URL}")
        logger.info("üîß –ù–û–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        logger.info("- ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram entities")  
        logger.info("- ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —Å Markdown –Ω–∞ HTML —Ä–∞–∑–º–µ—Ç–∫—É")
        logger.info("- ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å fallback")
        logger.info("- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
        logger.info("- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä: abdukhafizov95, farhod_developer, billz_namangan")
        logger.info("- ‚úÖ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–æ–≤ –≤ Google Sheets")
        
        bot.run()
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
        sys.exit(1)