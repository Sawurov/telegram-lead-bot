import os
import sys
import json
import logging
import gspread
import warnings
import asyncio
import re
import time
from datetime import datetime
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.error import TelegramError
from typing import Dict, Any, Optional
from flask import Flask
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self):
        self.TELEGRAM_BOT_TOKEN = self._get_env("TELEGRAM_BOT_TOKEN")
        self.SPREADSHEET_ID = self._get_env("SPREADSHEET_ID")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        google_creds_json = self._get_env("GOOGLE_CREDENTIALS")
        self.GOOGLE_CREDS = json.loads(google_creds_json)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        self.GOOGLE_CREDS["private_key"] = self.GOOGLE_CREDS["private_key"].replace("\\n", "\n")

        self.PORT = int(os.getenv("PORT", 8080))
        self._validate_google_creds()

    def _get_env(self, key: str, default: Optional[str] = None) -> str:
        value = os.getenv(key, default)
        if value is None:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {key}")
        return value

    def _validate_google_creds(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google"""
        required_keys = [
            "type", "project_id", "private_key_id",
            "private_key", "client_email", "client_id"
        ]
        for key in required_keys:
            if not self.GOOGLE_CREDS.get(key):
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á –≤ Google Credentials: {key}")

        if "-----BEGIN PRIVATE KEY-----" not in self.GOOGLE_CREDS["private_key"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞")

class GoogleSheetsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    def __init__(self, config: Config):
        self.config = config
        self._client = None
        self._spreadsheet = None
        self._retry_count = 0
        self._max_retries = 3
        self._backoff_base = 1.5  # –ë–∞–∑–∞ –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–æ—Ñ—Ñ–∞
        
    @property
    def client(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if self._client is None:
            for attempt in range(1, self._max_retries + 1):
                try:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                    self._client = gspread.service_account_from_dict(self.config.GOOGLE_CREDS)
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    self._client.openall()
                    logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google Sheets —É—Å–ø–µ—à–Ω–∞")
                    return self._client
                except Exception as e:
                    logger.error(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
                    if attempt == self._max_retries:
                        raise
                    sleep_time = self._backoff_base ** attempt
                    time.sleep(sleep_time)
        return self._client
    
    @property
    def spreadsheet(self):
        """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Google –¢–∞–±–ª–∏—Ü—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if self._spreadsheet is None:
            while self._retry_count < self._max_retries:
                try:
                    self._spreadsheet = self.client.open_by_key(self.config.SPREADSHEET_ID)
                    self._retry_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    break
                except Exception as e:
                    self._retry_count += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–µ (–ø–æ–ø—ã—Ç–∫–∞ {self._retry_count}): {e}")
                    if self._retry_count >= self._max_retries:
                        raise
                    time.sleep(2 ** self._retry_count)
        return self._spreadsheet

    async def append_lead(self, worksheet_name: str, data: list) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            worksheet = self.spreadsheet.worksheet(worksheet_name)
            worksheet.append_row(data)
            logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {worksheet_name}")
            return True
        except gspread.exceptions.APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Google: {e.response.text}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ append_lead: {str(e)}")
            return False

class LeadBot:
    def __init__(self, config: Config, sheets_manager: GoogleSheetsManager):
        self.config = config
        self.sheets = sheets_manager
        self.user_tabs = {
            "saliq_008": "–¢–µ—Ö–Ω–æ–ø–æ—Å",
            "abdukhafizov95": "–°–∞–º–∞—Ä–∫–∞–Ω–¥",
            "aqly_office": "–•–æ—Ä–µ–∑–º",
            "aqly_uz": "–•–æ—Ä–µ–∑–º",
            "aqly_hr": "–•–æ—Ä–µ–∑–º",
            "utkirraimov": "–î–∂–∏–∑–∑–∞–∫",
            "bob_7007": "–î–∂–∏–∑–∑–∞–∫",
            "farhod_developer": "–¢–µ—Ä–º–µ–∑",
            "shoxjaxon055": "–¢–∞—à–∫–µ–Ω—Ç",
            "user3": "–ë—É—Ö–∞—Ä–∞",
            "ravshan_billz": "All"
        }
        self.unconfirmed_leads: Dict[str, Dict[str, Any]] = {}
        self.lead_timers: Dict[str, asyncio.Task] = {}
        self.waiting_confirmation: Dict[int, str] = {}
        self.application = None
        self.loop = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è event loop
        
        # –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages = {
            'start': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–¥–µ–ª–∫—É.",
            'lead_success': "üì® –õ–∏–¥ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è @{username}!\n\n‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞ (–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å '–æ–∫' –∏–ª–∏ '–ø—Ä–∏–Ω—è–ª')",
            'reminder': "‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è @{username}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞.\n–ü–æ–ø—ã—Ç–∫–∞ {attempt}/3",
            'confirmation_success': (
                "‚úÖ –°–ø–∞—Å–∏–±–æ, @{username}! –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n\n"
                "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ AmoCRM\n"
                "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–¥–∏—é —Å–¥–µ–ª–∫–∏\n"
                "3Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ —ç—Ç–∞–ø–∞–º –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂\n\n"
                "üí™ –£–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º!"
            ),
            'lead_expired': "‚ùå –õ–∏–¥ –¥–ª—è @{username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
            'error': "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        }

    async def check_google_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            test_sheet = self.sheets.spreadsheet
            worksheet = test_sheet.worksheet("All")
            worksheet.append_row(["Connection Test", datetime.now().isoformat()])
            logger.info("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets —É—Å–ø–µ—à–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            return False

    async def send_reminder(self, chat_id: int, username: str, attempt: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            message = self.messages['reminder'].format(username=username, attempt=attempt)
            await self.application.bot.send_message(chat_id=chat_id, text=message)
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    async def handle_confirmation(self, chat_id: int, username: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏–¥–∞"""
        if chat_id not in self.waiting_confirmation:
            return False

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        for lead_key in list(self.lead_timers.keys()):
            if lead_key.startswith(f"{chat_id}:"):
                self.lead_timers[lead_key].cancel()
                del self.lead_timers[lead_key]

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for lead_key in list(self.unconfirmed_leads.keys()):
            if lead_key.startswith(f"{chat_id}:"):
                del self.unconfirmed_leads[lead_key]

        del self.waiting_confirmation[chat_id]

        await self.application.bot.send_message(
            chat_id=chat_id,
            text=self.messages['confirmation_success'].format(username=username)
        )
        return True

    async def start_lead_timer(self, chat_id: int, message_id: int, username: str):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏–¥–∞"""
        lead_key = f"{chat_id}:{message_id}"
        reminder_intervals = [120, 180, 180, 180]  # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        for attempt, delay in enumerate(reminder_intervals, 1):
            await asyncio.sleep(delay)
            if lead_key not in self.unconfirmed_leads:
                return
                
            if attempt <= 3:
                await self.send_reminder(chat_id, username, attempt)
            else:
                del self.unconfirmed_leads[lead_key]
                if chat_id in self.waiting_confirmation:
                    del self.waiting_confirmation[chat_id]
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=self.messages['lead_expired'].format(username=username)
                )
                return

    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = update.message
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
            
            if not message or not message.text:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if re.search(r'^(–æ–∫|–ø—Ä–∏–Ω—è–ª|—Å–ø–∞—Å–∏–±–æ|ok|oke?)$', message.text, re.I):
                if await self.handle_confirmation(message.chat_id, message.from_user.username):
                    return

            # –ü–æ–∏—Å–∫ –ª–∏–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤
            logger.info("–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            match = re.search(r'(?:@(\w+).*?(https?://[^\s]+amocrm\.ru[^\s]*))|(?:(https?://[^\s]+amocrm\.ru[^\s]*).*?@(\w+))', message.text)
            
            if not match:
                logger.warning("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É
            groups = match.groups()
            if groups[0] is not None:
                username, amo_link = groups[0], groups[1]
            else:
                username, amo_link = groups[3], groups[2]

            if await self.sheets.append_lead(self.user_tabs.get(username, "All"), 
                                          [datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 
                                           message.text, 
                                           amo_link]):
                sent_message = await message.reply_text(
                    self.messages['lead_success'].format(username=username)
                )
                
                lead_key = f"{message.chat_id}:{sent_message.message_id}"
                self.unconfirmed_leads[lead_key] = {
                    'assigned_to': username,
                    'amo_link': amo_link
                }
                self.waiting_confirmation[message.chat_id] = username
                self.lead_timers[lead_key] = asyncio.create_task(
                    self.start_lead_timer(message.chat_id, sent_message.message_id, username)
                )
            else:
                await message.reply_text(self.messages['error'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await message.reply_text(self.messages['error'])

    async def shutdown(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        for task in self.lead_timers.values():
            task.cancel()
        await asyncio.gather(*self.lead_timers.values(), return_exceptions=True)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è event loop
        try:
            self.loop = asyncio.get_event_loop()
        except RuntimeError:
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if not self.loop.run_until_complete(self.check_google_connection()):
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets. –í—ã—Ö–æ–¥.")
            sys.exit(1)

        # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        app = Flask(__name__)
        
        @app.route('/')
        def keep_alive():
            return "Bot is running!"
        
        def run_flask():
            app.run(host='0.0.0.0', port=self.config.PORT)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread(target=run_flask, daemon=True).start()
        
        while True:
            try:
                self.application = ApplicationBuilder().token(self.config.TELEGRAM_BOT_TOKEN).build()
                self.application.add_handler(CommandHandler("start", lambda u, c: self.start_command(u, c)))
                self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
                self.application.add_error_handler(self.error_handler)
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                self.application.post_shutdown = self.shutdown
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ loop
                self.application.run_polling(close_loop=False)
            except Exception as e:
                logger.error(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
                time.sleep(10)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
            logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
            test_result = await self.sheets.append_lead(
                "All",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Å—Ç "All" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                ["TEST", "Test Message", "Test Link"]
            )
            if test_result:
                logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheets: {e}")
        
        await update.message.reply_text(self.messages['start'])

    async def error_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}", exc_info=context.error)

if __name__ == "__main__":
    try:
        config = Config()
        sheets_manager = GoogleSheetsManager(config)
        bot = LeadBot(config, sheets_manager)
        bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)